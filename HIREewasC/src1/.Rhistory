install.packages('xtable')
#############################
# Data Visualization
#############################
# mvg.data.cluster = read.table('mvg_all_data.txt')
setwd("C:/Users/tomle/OneDrive - The Chinese University of Hong Kong/Research/HCC")
mvg.data.cluster = read.table('mvg_3000_data.txt')
# plot a heat map
library(ComplexHeatmap)
library(RColorBrewer)
# jpeg("Heatmap_3000.png", width = 1920, height = 1080, quality = 300)
conditions = c(rep('Fibriotic',4), rep("HCC tumor",20), rep("Cirrhotic",4),
rep("HCC tumor",5), "Fibriotic", rep("HCC tumor",2), "Fibriotic",
rep("HCC tumor",22), "Fibriotic", rep("HCC tumor",15),
rep("Cirrhotic",4), rep("HCC tumor",8), "Cirrhotic",
rep("HCC tumor",4), rep("Normal liver", 3),
rep("HCC tumor Group A", 13), rep("HCC tumor Group B", 17),
rep("Normal liver", 2))
patients = c(rep("H539",24), rep("H555",9), rep("H564",3), rep("H566",23), rep("H625",16), rep("BT15",12),
rep("H547",5), rep("Normal",3), rep("Group A",13), rep("Group B",17), rep("Normal",2))
column_ha = HeatmapAnnotation(df = data.frame(conditions, patients),
col = list(conditions = c("Fibriotic" =  "green", "Cirrhotic" = "orange",
"HCC tumor" = "red", "Normal liver" = "grey",
"HCC tumor Group A" = "black",
"HCC tumor Group B" = "yellow"),
patients = c("H539" =  "green", "H555" = "orange",
"H564" = "red", "H566" = "blue",
"H625" = "purple", "BT15" = "brown",
"H547" = "pink", "Normal" = "grey",
"Group A" = "black", "Group B" = "yellow")))
col_fun = colorRampPalette(rev(brewer.pal(10, "RdYlBu")))(256)
heatmap = Heatmap(as.matrix(mvg.data.cluster), name = "Level", cluster_rows = FALSE,
width = unit(32, "cm"), height = unit(16, "cm"), show_row_names = FALSE,
column_names_rot = 90, bottom_annotation = column_ha, col = col_fun,
column_names_gp = gpar(fontsize = 7), row_title = 'CpG sites')
# Group samples according to different conditions found in the heatmap (2nd Grouping)
sample.names = colnames(mvg.data.cluster)[column_order(heatmap)]
# group.1 = sample.names[c(1:19, 24:27)] # All CpG sites
group.1 = sample.names[c(1:17, 22:25)] # 3000 CpG sites
mvg.data.group.1 = mvg.data.cluster[,group.1]
# group.2 = sample.names[c(20:23, 28:47)] # All CpG sites
group.2 = sample.names[c(18:21, 26:45)] # 3000 CpG sites
mvg.data.group.2 = mvg.data.cluster[,group.2]
# group.3 = sample.names[48:62] # All CpG sites
group.3 = sample.names[46:68] # 3000 CpG sites
mvg.data.group.3 = mvg.data.cluster[,group.3]
# group.4 = sample.names[63:length(sample.names)] # All CpG sites
group.4 = sample.names[69:length(sample.names)] # 3000 CpG sites
mvg.data.group.4 = mvg.data.cluster[,group.4]
ind = c(dim(mvg.data.group.1)[2], dim(mvg.data.group.2)[2], dim(mvg.data.group.3)[2], dim(mvg.data.group.4)[2])
mvg.data.cluster = cbind(mvg.data.group.1, mvg.data.group.2, mvg.data.group.3, mvg.data.group.4)
rm(sample.names, group.1, group.2, group.3, group.4, mvg.data.group.1,
mvg.data.group.2, mvg.data.group.3, mvg.data.group.4)
library(MCMCpack)
library(quadprog)
num_celltype = 3
num_subtype = 4
tol = 10^(-5)
num_iter = 20000
setwd("C:/Users/tomle/OneDrive - The Chinese University of Hong Kong/Research/HIRE/HIREewasV/src1")
system("R CMD SHLIB HIREV.c")
dyn.load('HIREV.dll')
# O = t(Ometh)
M = nrow(mvg.data.cluster) # CpG site number
N = ncol(mvg.data.cluster) # sample number
Q = num_subtype # cancer number
K = num_celltype
sig.sqTiss.t = array(10, dim = c(M,K));     sig.sqErr.t = array(10, dim = c(M))
cluster.tilde = as.vector(kmeans(t(mvg.data.cluster), Q, nstart = 50, iter.max = 100)$cluster) - 1
hat.pi = as.vector(table(cluster.tilde)) / sum(as.vector(table(cluster.tilde)))
# Choosing the optimal initial values
CorDescent = function(MethMatr, num_celltype, ini_P, tol = 1e-7){
MethMatr = t(MethMatr)
err0 = 0
err1 = 1000
m = nrow(MethMatr) #number of CpG sites
n = ncol(MethMatr) #number of samples
K = num_celltype
#initialize P_matr
P_matr_t = ini_P
while(abs(err1 - err0) >= tol){
err0 = err1
#update U_matr
Dmat = 2*P_matr_t%*%t(P_matr_t)
Amat = cbind(diag(rep(1,K)), diag(rep(-1,K)))
bvec = c(rep(0,K), rep(-1,K))
U_matr_t = t( vapply(seq_len(m), function(j){
dvec = 2*P_matr_t %*% as.numeric(MethMatr[j,])
solu = solve.QP(Dmat, dvec, Amat, bvec)
solu$solution
}, FUN.VALUE=rep(-1,K)) )
#update P_matr
Dmat = 2*t(U_matr_t) %*% U_matr_t
Amat = cbind(matrix(1, K, K), diag(rep(1,K)))
bvec = c(rep(1, K), rep(0, K))
P_matr_t = vapply(seq_len(n), function(i){
dvec = 2 * t(U_matr_t) %*% as.numeric(MethMatr[ ,i])
solu = solve.QP(Dmat, dvec, Amat, bvec, meq = K)
solu$solution
}, FUN.VALUE=rep(-1,K))
#calculate errors
err1 = sum((MethMatr - U_matr_t %*% P_matr_t)^2)
}
mu_initial <- vapply(seq_len(m), function(j){
if(K > 2){
fit <- lm(MethMatr[j,]~as.matrix(t(P_matr_t[-1, ])))
}else{
fit <- lm(MethMatr[j,]~as.numeric(P_matr_t[-1, ]))
}
tmp <- as.numeric(summary(fit)$coeff[ ,1])
tmp[-1] <- tmp[1] + tmp[-1]
tmp
}, FUN.VALUE = rep(-1,K) )
return(list(hat.mu=t(mu_initial), hat.p=t(P_matr_t)))
}
initial.val = CorDescent(t(mvg.data.cluster), K, t(rdirichlet(N, rep(1, K))))
hat.p = t(initial.val$hat.p)
hat.mu = initial.val$hat.mu
library(pracma)
hat.beta = array(NA, dim = c(M, K, Q))
hat.beta[,,1] = 0
for(q in 2:Q){
O.q = t(mvg.data.cluster[,which(cluster.tilde == (q-1))])
P.q = t(hat.p[,which(cluster.tilde == (q-1))])
temp = P.q %*% t(hat.mu)
temp = O.q - temp
hat.beta[,,q] = t(pinv(P.q) %*% temp)
}
hat.beta = array(0, dim = c(M, K, Q))
EmEwasVRcallC <- function(Ometh, x.tilde, pi, P_t, mu_t, beta_t, sig.sqTiss.t, sig.sqErr.t, tol, num_iter, loglike){
args <- list("P_init"=as.numeric(P_t), "mu_init"=as.numeric(mu_t), "beta_init"=as.numeric(beta_t),
"beta_init_dim"=as.integer(dim(beta_t)), "Ometh_r"=as.numeric(Ometh),
"Ometh_r_dim"=as.integer(dim(Ometh)), "X_tilde" = x.tilde, "pi_init"=as.numeric(pi),
"sig_sqTiss_init"=as.numeric(sig.sqTiss.t), "sig_sqErr_init"=as.numeric(sig.sqErr.t),
"tol_r" = as.numeric(tol), "num_iter" = as.integer(num_iter), 'loglikelihood' = as.numeric(loglike))
ret_list <- .Call("EmEwasVRcallC", args)
return(ret_list)
}
message("  Implementing EM algorithm... \n")
ret_list = EmEwasVRcallC(as.matrix(mvg.data.cluster), cluster.tilde, hat.pi, hat.p, hat.mu, hat.beta,
sig.sqTiss.t, sig.sqErr.t, tol, num_iter, 0)
ret_list$label
